1) To install git on your linux:
$ sudo apt-get install git -y

2) To check the version of the git:
$ git --version

3) To get help with git:
$ git help config
$ git config --help

4) To add user name to your git: 
$ git config --global user.name "your_user_name"

5) To add email id to your git:
$ git config --global user.email "your_email"

6) To print all the configured attributes:
$ git config --list

Name of the file containing these configurations:
.gitconfig  
You can open this file with any editor
This file is present in the home directory

7) To initialize the folder to git: (first go inside the folder you want to initialize git in)
$ git init

WORKING WITH REPOSITORY:-

8) To clone a repository on your local machine:
$ git clone (url of the repository from github page without using ())

9) To get the status of your git: (it tells you about the new files that are added or need to be added to your repository)
$ git status

10) To add your file to git:
$ git add filename

11) To commit your file with comments:
$ git commit -m "Your comment, use -m to write comment followed by the comment in string" filename

12) To directly stage your modified file and commit it: NOTE:- untracked files wont be staged and committed only for tracked files that are staged or yet to be staged
$ git commit -a -m "comment"

13) To get the last commited status of the file:
$ git checkout filename
$ git checkout -f     	to checkout all files at once

14) To add all the files to staging area or track at once: 
$ git add --a

15) To compare the changes in the files in the current directory from that of in the staging area:
$ git diff

16) Compares the files of the current staged area from the last commit:
$ git diff --staged

17) To know all the commits that have been made till now:
$ git log

18) To know all the commits with their differences: NOTE:- hit q to exit log preview
$ git log -p

19) To know last 3 commits with their differences: NOTE:- any number can be checked
$ git log -p -3

20) To know all the commits in layout manner:
$ git log --stat

21) To know all the commits in one line description:
$ git log --pretty=oneline

22) To know all the commits in short decription:
$ git log --pretty=short

23) To know all the commits in short description with committer name:
$ git log --pretty=full

24) To know logs with time filter:
$ git log 2.days
$ git log 2.weeks
$ git log 2.months
$ git log 2.years

To know other git log commands google : git scm usefull options for git log format

25) To know according to a format: 
$ git log --pretty=format: "%h -- %an"

26) To ammend a change and/or a comment into last commit:
$ git commit --amend
It will open the vim editor, write your comment and exit it or use the best -m method to write your comment. Make sure you have added your modified file to staging area before commiting this way.

27) To push your commited files or folders or both:
$ git push - origin master

28) To create alias for commands:
$ git config --global alias.[your alias] [command]
For Eg:- to create an alias for unstaging a file type
$ git config --global alias.unstage 'restore --staged --'

29) To create a new branch from the current branch:
$ git checkout -b branchname

30) To switch to a different branch:
$ git checkout branchname

31) To merge a branch to the current branch:
$ git merge branchname

32) To see all the branches in a git repository:
$ git branch

33) To see all the branches in a git repository with commit hash and message:
$ git branch -v

34) To see all the merged branches that are merged somewhere:
$ git branch --merged

35) To see all the merged branches that are not merged yet:
$ git branch --no-merged

36) To delete a branch:
This line will work if the branch is already merged somewhere and has no new changes else it will raise an error
$ git branch -d branchname

This line will strictly delete the branch without checking anything
$ git branch -D branchname

Extras:
To connect your git to a github repository:

Step 1 : Create a gthub repository on the site.
Give it a name,description and make it public (public allows easy pull and push)

Step 2 : Copy the repository name. It will be like - git@github.com:ownername/repositoryname.git
NOTE : ownername and repository, copy it  carefully.

Step 3 : Go to your git repository on your system and type the command in your git bash
git remote add origin git@github.com:ownername/repositoryname.git
NOTE : origin is the name of the online hosted github repository

You have succesfully connected your git repository to the online hosted github repository.

To Check for the remote repositories:
git remote

To check for the remote repositories in detail:
git remote -v

NOTE : you will not be able to push or pull anything right now as you are not a accepted user yet. For that you need to get permission from github.
FOR THAT, 
1) Go to github settings.
2) Go to SSH and GPG keys.
3) Create a new SSH key. Give it a title and a SSH key.
NOW, To generate a SSH key google search ssh keys github or follow the steps below.
1) open git bash and run this command
$ ssh-keygen -t rsa -b 4096 -c "your_email@example.com"
and press Enter Enter to skip the passphrase dialogs.
Your key will be generated.
2) Adding this key to ssh-agent
run this command to make sure your ssh agent is working
$ eval $(ssh-agent -s)
Now add the key by this command
$ ssh-add ~/.ssh/id_rsa
3) Adding key to github
Run the command
$ tail ~/.ssh/id_rsa.pub
it will show you your ssh key
Take the key, Copy it and paste it where the ssh key was asked(go above on step 3 Create a new SSH key.)

Now you can Push or pull your files.
